use std::error::Error;
use std::fs::File;
use std::io::{Write, BufReader, BufRead};
use pcre2::bytes::RegexBuilder;

use std::process::Command;
use reqwest;

fn write_version<'a>(f: &'a mut File, xml_contents: &'a str) -> Result<&'a str, Box<dyn Error>> {
    let package_version = xml_contents
        .split("<rootasrole version=\"")
        .nth(1)
        .ok_or(Box::<dyn Error>::from("Version not found"))?
        .split('"')
        .next()
        .ok_or(Box::<dyn Error>::from("Version not found"))?;
    f.write_all(
        format!(
            "pub const PACKAGE_VERSION: &'static str = \"{}\";\n",
            package_version
        )
        .as_bytes(),
    )?;
    Ok(package_version)
}

fn write_dtd(f: &mut File, xml_contents: &str) -> Result<(), Box<dyn Error>> {
    let mut dtd = xml_contents
        .split("?>")
        .nth(1)
        .ok_or(Box::<dyn Error>::from("DTD not found"))?
        .split("]>")
        .next()
        .ok_or(Box::<dyn Error>::from("DTD not found"))?
        .to_string();
    dtd.push_str("]>");
    
    f.write_all(
        format!(
            "pub const DTD: &'static str = \"{}\n\";\n",
            dtd.replace('"', "\\\"")
        )
        .as_bytes(),
    ).map_err(|e| e.into())
}

fn set_cargo_version(package_version: &str) -> Result<(), Box<dyn Error>>{
    let cargo_toml = File::open(std::path::Path::new("Cargo.toml")).expect("Cargo.toml not found");
    let reader = BufReader::new(cargo_toml);
    let lines = reader.lines().map(|l| l.unwrap()).collect::<Vec<String>>();
    let mut cargo_toml = File::create(std::path::Path::new("Cargo.toml")).expect("Cargo.toml not found");
    for line in lines {
        if line.starts_with("version") {
            writeln!(cargo_toml,"version = \"{}\"", package_version)?;
        } else {
            writeln!(cargo_toml,"{}",line)?;
        }
    }
    cargo_toml.sync_all()?;
    Ok(())
}

fn write_doc(f: &mut File) -> Result<(), Box<dyn Error>> {
    let docresp = reqwest::blocking::get("https://git.kernel.org/pub/scm/docs/man-pages/man-pages.git/plain/man7/capabilities.7").expect("request failed");
    let haystack = docresp.text()?;

    //write to new temporary file
    let temp = std::path::Path::new("temp.7");
    let mut tempf = File::create(temp)?;
    tempf.write_all(haystack.as_bytes())?;
    tempf.flush()?;
    //now execute man command to convert to ascii
    let res = String::from_utf8(Command::new("/usr/bin/man").args(&["--nh", "--nj", "-al", "-P", "/usr/bin/cat", "temp.7"]).output()?.stdout)?;
    //delete temp file
    std::fs::remove_file(temp)?;
    //now parse the output
    let mut re = RegexBuilder::new();
    re.multi_line(true);
    let re = re.build(r"^       (CAP_[A-Z_]+)\K((?!^       CAP_[A-Z_]+|^   Past).|\R)+")?;
    let spacere = regex::Regex::new(r" +")?;
    f.write(r#"use capctl::Cap;
"#.as_bytes())?;
    f.write(r#"pub fn get_capability_description(cap : &Cap) -> &'static str {
    match *cap {
"#
        .as_bytes())?;
    let mut caplist = Vec::new();
    for cap in re.captures_iter(&res.as_bytes()) {

        let cap = cap?;
        let name = std::str::from_utf8(cap.get(1).unwrap().as_bytes())?;
        if caplist.contains(&name) {
            continue;
        }
        caplist.push(name);
        let mut desc = std::string::String::from_utf8(cap.get(0).unwrap().as_bytes().to_vec())?;
        desc = spacere.replace_all(&desc, " ").to_string();
        let desc = desc.trim().to_string();
        f.write(format!("        Cap::{} => r#\"{}\"#,\n", name.replace("CAP_",""), desc).as_bytes())?;
    }
    f.write(r#"       _ => "Unknown capability",
    }
}"#.as_bytes())?;
    Ok(())
}

fn main() {
    println!("cargo:rerun-if-changed=resources/rootasrole.xml");
    println!("cargo:rerun-if-changed=build.rs");
    let caps_path = std::path::Path::new("src").join("descriptions.rs");
    let mut capsf = File::create(caps_path).unwrap();
    capsf.write(b"// This file is generated by build.rs\n").unwrap();
    capsf.write(b"// Do not edit this file directly\n").unwrap();
    capsf.write(b"// Instead edit build.rs and run cargo build\n").unwrap();
    write_doc(&mut capsf).unwrap();
    capsf.flush().unwrap();
    let cargo_toml = include_str!("resources/rootasrole.xml");
    let dest_path = std::path::Path::new("src").join("xml_version.rs");
    let mut f = File::create(dest_path).unwrap();
    f.write(b"// This file is generated by build.rs\n").unwrap();
    f.write(b"// Do not edit this file directly\n").unwrap();
    f.write(b"// Instead edit build.rs and run cargo build\n").unwrap();
    match write_version(&mut f, cargo_toml) {
        Ok(package_version) => {
            if let Err(err) = set_cargo_version(package_version) {
                eprintln!("cargo:warning={}", err);
            }
        },
        Err(err) => {
            eprintln!("cargo:warning={}", err);
        }
    }
    if let Err(err) = write_dtd(&mut f, cargo_toml) {
        eprintln!("cargo:warning={}", err);
    }
    
    f.flush().unwrap();
}