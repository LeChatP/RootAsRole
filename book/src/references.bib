
@inproceedings{abedinDetectionResolutionAnomalies2006,
	location = {Berlin, Heidelberg},
	title = {Detection and Resolution of Anomalies in Firewall Policy Rules},
	isbn = {978-3-540-36799-4},
	doi = {10.1007/11805588_2},
	series = {Lecture Notes in Computer Science},
	abstract = {A firewall is a system acting as an interface of a network to one or more external networks. It implements the security policy of the network by deciding which packets to let through based on rules defined by the network administrator. Any error in defining the rules may compromise the system security by letting unwanted traffic pass or blocking desired traffic. Manual definition of rules often results in a set that contains conflicting, redundant or overshadowed rules, resulting in anomalies in the policy. Manually detecting and resolving these anomalies is a critical but tedious and error prone task. Existing research on this problem have been focused on the analysis and detection of the anomalies in firewall policy. Previous works define the possible relations between rules and also define anomalies in terms of the relations and present algorithms to detect the anomalies by analyzing the rules. In this paper, we discuss some necessary modifications to the existing definitions of the relations. We present a new algorithm that will simultaneously detect and resolve any anomaly present in the policy rules by necessary reorder and split operations to generate a new anomaly free rule set. We also present proof of correctness of the algorithm. Then we present an algorithm to merge rules where possible in order to reduce the number of rules and hence increase efficiency of the firewall.},
	pages = {15--29},
	booktitle = {Data and Applications Security {XX}},
	publisher = {Springer},
	author = {Abedin, Muhammad and Nessa, Syeda and Khan, Latifur and Thuraisingham, Bhavani},
	editor = {Damiani, Ernesto and Liu, Peng},
	date = {2006},
	langid = {english},
	keywords = {Anomalies, Firewalls, Network Security, Packet Filters, Security Policy},
	file = {Abedin et al_2006_Detection and Resolution of Anomalies in Firewall Policy Rules.pdf:/home/ebilloir/Zotero/storage/SF8UN3P2/Abedin et al_2006_Detection and Resolution of Anomalies in Firewall Policy Rules.pdf:application/pdf},
}

@article{sharafExtendedBerkeleyPacket2022,
	title = {Extended Berkeley Packet Filter: An Application Perspective},
	volume = {10},
	rights = {https://creativecommons.org/licenses/by-nc-nd/4.0/},
	issn = {2169-3536},
	url = {https://ieeexplore.ieee.org/document/9968265/},
	doi = {10.1109/ACCESS.2022.3226269},
	shorttitle = {Extended Berkeley Packet Filter},
	pages = {126370--126393},
	journaltitle = {{IEEE} Access},
	shortjournal = {{IEEE} Access},
	author = {Sharaf, Husain and Ahmad, Imtiaz and Dimitriou, Tassos},
	urldate = {2024-06-20},
	date = {2022},
	abstract = {The extended Berkeley Packet Filter (eBPF) is a lightweight and fast 64-bit RISC-like virtual machine (VM) inside the Linux kernel. eBPF has emerged as the most promising and de facto standard of executing untrusted, user-defined specialized code at run-time inside the kernel with strong performance, portability, flexibility, and safety guarantees. Due to these key benefits and availability of a rich ecosystem of compilers and tools within the Linux kernel, eBPF has received widespread adoption by both industry and academia for a wide range of application domains. The most important include enhancing performance of monitoring tools and providing a variety of new security mechanisms, data collection tools and data screening applications. In this review, we investigate the landscape of existing eBPF use-cases and trends with aim to provide a clear roadmap for researchers and developers. We first introduce the necessary background knowledge for eBPF before delving into its applications. Although, the potential use-cases of eBPF are vast, we restrict our focus on four key application domains related to networking, security, storage, and sandboxing. Then for each application domain, we analyze and summarize solution techniques along with their working principles in an effort to provide an insightful discussion that will enable researchers and practitioners to easily adopt eBPF into their designs. Finally, we delineate several exciting research avenues to fully exploit the revolutionary eBPF technology.}
}

@incollection{jinRABACRoleCentricAttributeBased2012,
	location = {Berlin, Heidelberg},
	title = {{RABAC}: Role-Centric Attribute-Based Access Control},
	volume = {7531},
	isbn = {978-3-642-33703-1 978-3-642-33704-8},
	url = {http://link.springer.com/10.1007/978-3-642-33704-8_8},
	shorttitle = {{RABAC}},
	pages = {84--96},
	booktitle = {Computer Network Security},
	publisher = {Springer Berlin Heidelberg},
	author = {Jin, Xin and Sandhu, Ravi and Krishnan, Ram},
	editor = {Kotenko, Igor and Skormin, Victor},
	editorb = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard},
	editorbtype = {redactor},
	urldate = {2024-06-20},
	date = {2012},
	doi = {10.1007/978-3-642-33704-8_8},
	note = {Series Title: Lecture Notes in Computer Science},
	abstract = {Role-based access control (RBAC) is a commercially dominant model, standardized by the National Institute of Standards and Technology (NIST). Although RBAC provides compelling benefits for security management it has several known deficiencies such as role explosion, wherein multiple closely related roles are required (e.g., attending-doctor role is separately defined for each patient). Numerous extensions to RBAC have been proposed to overcome these shortcomings. Recently NIST announced an initiative to unify and standardize these extensions by integrating roles with attributes, and identified three approaches: use attributes to dynamically assign users to roles, treat roles as just another attribute, and constrain the permissions of a role via attributes. The first two approaches have been previously studied. This paper presents a formal model for the third approach for the first time in the literature. We propose the novel role-centric attribute-based access control (RABAC) model which extends the NIST RBAC model with permission filtering policies. Unlike prior proposals addressing the role-explosion problem, RABAC does not fundamentally modify the role concept and integrates seamlessly with the NIST RBAC model. We also define an XACML profile for RABAC based on the existing XACML profile for RBAC.},
}

@inproceedings{balamuruganHoneyBeeBehaviour2015,
	location = {Chennai, India},
	title = {A Honey Bee behaviour inspired novel Attribute-based access control using enhanced Bell-Lapadula model in cloud computing},
	isbn = {978-1-4799-8787-0 978-1-4799-8788-7},
	url = {http://ieeexplore.ieee.org/document/7396064/},
	doi = {10.1109/ICIICT.2015.7396064},
	eventtitle = {2015 International Conference on Innovation Information in Computing Technologies ({ICIICT})},
	pages = {1--6},
	booktitle = {International Confernce on Innovation Information in Computing Technologies},
	publisher = {{IEEE}},
	author = {Balamurugan, B and Shivitha, N Gnana and Monisha, V and Saranya, V},
	urldate = {2024-06-20},
	date = {2015-02},
	abstract = {Cloud computing is one of the emerging technologies that is being used widely these days. It makes use of the computing resources such as hardware and software that is delivered over the internet and provides remote services with user's data, software and computation. There has been a growing trend to use the cloud for large-scale data storage. This has raised the important security issue of how to control and prevent unauthorized access to data stored in the cloud. There are various access control techniques in cloud environment such as IBAC, RBAC, ABAC, MAC, DAC. Among these techniques, Attribute-Based Access Control (ABAC) is gaining more importance. Here access is granted based on attributes. Our primary objective is to summarize all the access control techniques in cloud environment. Our main objective is to come up with a Novel Attribute-Based Access Control for cloud security using Enhanced Bell-Lapadula Model inspired from Honey Bee behaviour. The Honey Bee prevents the intruders from entering into their hives. This is similar to the access control mechanism in cloud environment. It identifies the bee that belongs to the same hive by the possession of the small barbs on the stings. Similarly, we are trying to restrict the users based on the possession of correct set of attributes by using ABAC technique.}
}

@incollection{kashmarAccessControlModels2020,
	location = {Cham},
	title = {From Access Control Models to Access Control Metamodels: A Survey},
	volume = {70},
	isbn = {978-3-030-12384-0 978-3-030-12385-7},
	url = {http://link.springer.com/10.1007/978-3-030-12385-7_61},
	shorttitle = {From Access Control Models to Access Control Metamodels},
	pages = {892--911},
	booktitle = {Advances in Information and Communication},
	publisher = {Springer International Publishing},
	author = {Kashmar, Nadine and Adda, Mehdi and Atieh, Mirna},
	editor = {Arai, Kohei and Bhatia, Rahul},
	urldate = {2024-06-20},
	date = {2020},
	langid = {english},
	doi = {10.1007/978-3-030-12385-7_61},
	note = {Series Title: Lecture Notes in Networks and Systems},
	abstract = {Access control (AC) is a computer security requirement used to control, in a computing environment, what the user can access, when and how. Policy administration is an essential feature of an AC system. As the number of computers are in hundreds of millions, and due to the different organization requirements, applications and needs, various AC models are presented in literature, such as: Discretionary Access Control (DAC), Mandatory Access Control (MAC), Role Based Access Control (RBAC), etc. These models are used to implement organizational policies that prevent the unauthorized disclosure of sensitive data, protecting the data integrity, and enabling secure access and sharing of information. Each AC model has its own methods for making AC decisions and policy enforcement. However, due to the diversity of AC models and the various concerns and restrictions, its essential to find AC metamodels with higher level of abstraction. Access control metamodels serve as a unifying framework for specifying any AC policy and should ease the migration from an AC model to another. This study reviews existing works on metamodels descriptions and representations. But, are the presented metamodels sufficient to handle the needed target of controlling access especially in the presence of the current information technologies? Do they encompass all features of other AC models? In this paper we are presenting a survey on AC metamodels.}
}

@article{ferraioloProposedNISTStandard2001,
	title = {Proposed {NIST} standard for role-based access control},
	volume = {4},
	issn = {1094-9224, 1557-7406},
	url = {https://dl.acm.org/doi/10.1145/501978.501980},
	doi = {10.1145/501978.501980},
	abstract = {In this article we propose a standard for role-based access control ({RBAC}). Although {RBAC} models have received broad support as a generalized approach to access control, and are well recognized for their many advantages in performing large-scale authorization management, no single authoritative definition of {RBAC} exists today. This lack of a widely accepted model results in uncertainty and confusion about {RBAC}'s utility and meaning. The standard proposed here seeks to resolve this situation by unifying ideas from a base of frequently referenced {RBAC} models, commercial products, and research prototypes. It is intended to serve as a foundation for product development, evaluation, and procurement specification. Although {RBAC} continues to evolve as users, researchers, and vendors gain experience with its application, we feel the features and components proposed in this standard represent a fundamental and stable set of mechanisms that may be enhanced by developers in further meeting the needs of their customers. As such, this document does not attempt to standardize {RBAC} features beyond those that have achieved acceptance in the commercial marketplace and research community, but instead focuses on defining a fundamental and stable set of {RBAC} components. This standard is organized into the {RBAC} Reference Model and the {RBAC} System and Administrative Functional Specification. The reference model defines the scope of features that comprise the standard and provides a consistent vocabulary in support of the specification. The {RBAC} System and Administrative Functional Specification defines functional requirements for administrative operations and queries for the creation, maintenance, and review of {RBAC} sets and relations, as well as for specifying system level functionality in support of session attribute management and an access control decision process.},
	pages = {224--274},
	number = {3},
	journaltitle = {{ACM} Transactions on Information and System Security},
	shortjournal = {{ACM} Trans. Inf. Syst. Secur.},
	author = {Ferraiolo, David F. and Sandhu, Ravi and Gavrila, Serban and Kuhn, D. Richard and Chandramouli, Ramaswamy},
	urldate = {2022-11-24},
	date = {2001-08},
	langid = {english},
	file = {Ferraiolo et al_2001_Proposed NIST standard for role-based access control.pdf:/home/ebilloir/Zotero/storage/U5ID298G/Ferraiolo et al_2001_Proposed NIST standard for role-based access control.pdf:application/pdf},
}


@inproceedings{billoirImplementingPrincipleLeast2023,
	address = {Montreal, QC, Canada},
	title = {Implementing the {Principle} of {Least} {Privilege} {Using} {Linux} {Capabilities}: {Challenges} and {Perspectives}},
	isbn = {9798350342871},
	shorttitle = {Implementing the {Principle} of {Least} {Privilege} {Using} {Linux} {Capabilities}},
	url = {https://ieeexplore.ieee.org/document/10339753/},
	doi = {10.1109/CSNet59123.2023.10339753},
	abstract = {Historically and by default, Linux does not respect the principle of least privilege because it grants all the privileges to administrators to execute their tasks. With the new personal data protection or export control regulations, the principle of least privilege is mandatory and must be applied even for system administrators. The Linux operating system since version 2.2 divides the privileges associated with the superuser into distinct units called capabilities. Linux capabilities allow coarse-grained access control to restricted system features. The â€œRootAsRoleâ€ project is introduced as a solution for delegating administrative tasks while matching the necessary capabilities. However, limitations in user experience and the mapping of Linux capabilities pose significant obstacles. This paper proposes enhancements to achieving a balance between usability and the principle of least privilege, emphasizing the need for precise capability definitions. Future work involves enhancing the RootAsRole access control model and addressing the need for a comprehensive administration access control framework for managing Linux capabilities effectively.},
	urldate = {2023-12-21},
	booktitle = {2023 7th {Cyber} {Security} in {Networking} {Conference} ({CSNet})},
	publisher = {IEEE},
	author = {Billoir, Eddie and Laborde, Romain and Wazan, Ahmad Samer and RÃ¼tschlÃ©, Yves and Benzekri, Abdelmalek},
	month = {oct},
	year = {2023},
	pages = {130--136},
}


@article{billoirImplementingPrincipleLeast2024,
	title = {Implementing the principle of least administrative privilege on operating systems: challenges and perspectives},
	issn = {1958-9395},
	shorttitle = {Implementing the principle of least administrative privilege on operating systems},
	url = {https://doi.org/10.1007/s12243-024-01033-5},
	doi = {10.1007/s12243-024-01033-5},
	abstract = {With the new personal data protection or export control regulations, the principle of least privilege is mandatory and must be applied even for system administrators. This article explores the different approaches implemented by the main operating systems (namely Linux, Windows, FreeBSD, and Solaris) to control the privileges of system administrators in order to enforce the principle of least privilege. We define a set of requirements to manage these privileges properly, striving to balance adherence to the principle of least privilege and usability. We also present a deep analysis of each administrative privilege system based on these requirements and exhibit their benefits and limitations. This evaluation also covers the efficiency of the currently available solutions to assess the difficulty of performing administrative privileges management tasks. Following the results, the article presents the RootAsRole project, which aims to simplify Linux privilege management. We describe the new features introduced by the project and the difficulties we faced. This concrete experience allows us to highlight research challenges.},
	language = {en},
	urldate = {2024-07-03},
	journal = {Annals of Telecommunications},
	author = {Billoir, Eddie and Laborde, Romain and Wazan, Ahmad Samer and RÃ¼tschlÃ©, Yves and Benzekri, Abdelmalek},
	month = {may},
	year = {2024},
	keywords = {Access control, Administrative privileges, FreeBSD, Linux, Operating system, Principle of least privilege, Solaris, Windows},
}


@article{wazanRootAsRoleSecurityModule2022,
	title = {{RootAsRole}: a security module to manage the administrative privileges for {Linux}},
	issn = {0167-4048},
	url = {https://www.sciencedirect.com/science/article/pii/S0167404822003753},
	doi = {https://doi.org/10.1016/j.cose.2022.102983},
	abstract = {Today, Linux users use sudo/su commands to attribute Linux's administrative privileges to their programs. These commands always give the whole list of administrative privileges to Linux programs, unless there are pre-installed default policies defined by Linux Security Modules(LSM). LSM modules require users to inject the needed privileges into the memory of the process and to declare the needed privileges in an LSM policy. This approach can work for users who have good knowledge of the syntax of LSM modulesâ€™ policies. Adding or editing an existing policy is a very time-consuming process because LSM modules require adding a complete list of traditional permissions as well as administrative privileges. We propose a new Linux module called RootAsRole that is dedicated to the management of administrative privileges. RootAsRole is not proposed to replace LSM modules but to be used as a complementary module to manage Linux administrative privileges. RootAsRole allows Linux administrators to define a set of roles that contain the administrative privileges and restrict their usage to a set of users/groups and programs. Finally, we conduct an empirical performance study to compare RootAsRole tools with sudo/su commands to show that the overhead added by our module remains acceptable.},
	journal = {Computers \& Security},
	author = {Wazan, Ahmad Samer and Chadwick, David W. and Venant, Remi and Billoir, Eddie and Laborde, Romain and Ahmad, Liza and Kaiiali, Mustafa},
	year = {2022},
	keywords = {Access control, Linux capabilities, Privilege escalation, Sudo/su},
	pages = {102983},
}


@inproceedings{wazanRootAsRoleSecureAlternative2021,
	address = {Cham},
	title = {{RootAsRole}: {Towards} a {Secure} {Alternative} to sudo/su {Commands} for {Home} {Users} and {SME} {Administrators}},
	isbn = {978-3-030-78120-0},
	abstract = {The typical way to run an administrative task on Linux is to execute it in the context of a super user. This breaks the principle of least privilege on access control. Other solutions, such as SELinux and AppArmor, are available but complex to use. In this paper, a new Linux module, named RootAsRole, is proposed to allow users to fine-grained control the privileges they grant to Linux commands as capabilities. It adopts a role-based access control (RBAC) [14], in which administrators can define a set of roles and the capabilities that are assigned to them. Administrators can then define the rules controlling what roles users or groups can assign to themselves. Each time a Linux user wants to execute a program that necessitates one or more capabilities, (s)he should assign the role to him/herself that contains the needed capabilities, providing there is a rule that allows it. A pilot implementation on Linux systems is illustrated in detail.},
	booktitle = {{ICT} {Systems} {Security} and {Privacy} {Protection}},
	publisher = {Springer International Publishing},
	author = {Wazan, Ahmad Samer and Chadwick, David W. and Venant, Remi and Laborde, Romain and Benzekri, Abdelmalek},
	year = {2021},
	pages = {196--209},
}

@inproceedings{billoirImplementingPrincipleLeast2024b,
	author = {Billoir, Eddie and Laborde, Romain and Wazan, Ahmad Samer and Rutschle, Yves and Benzekri, Abdelmalek},
	title = {Enhancing Secure Deployment with Ansible: A Focus on Least Privilege and Automation for Linux},
	year = {2024},
	isbn = {9798400717185},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3664476.3670929},
	doi = {10.1145/3664476.3670929},
	abstract = {As organisations increasingly adopt Infrastructure as Code (IaC), ensuring secure deployment practices becomes paramount. Ansible is a well-known open-source and modular tool for automating IT management tasks. However, Ansible is subject to supply-chain attacks that can compromise all managed hosts. This article presents a semi-automated process that improves Ansible-based deployments to have fine-grained control on administrative privileges granted to Ansible tasks. We describe the integration of the RootAsRole framework to Ansible. Finally, we analyse the limit of the current implementation.},
	booktitle = {Proceedings of the 19th International Conference on Availability, Reliability and Security},
	articleno = {56},
	numpages = {7},
	keywords = {Ansible, Infrastructure as Code, Principle of Least privilege, Security},
	location = {Vienna, Austria},
	series = {ARES '24}
}